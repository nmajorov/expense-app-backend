definitions:
  model.AccountInfo:
    properties:
      email:
        description: email is a username
        type: string
      last_name:
        type: string
      name:
        type: string
      username:
        type: string
    type: object
  model.Credentials:
    properties:
      passwd:
        type: string
      username:
        type: string
    type: object
  model.Expense:
    properties:
      amount:
        type: number
      createdAT:
        type: string
      description:
        type: string
      id:
        type: integer
      reportID:
        type: integer
      tstamp:
        type: string
    type: object
  model.Report:
    properties:
      createdAT:
        type: string
      expenses:
        items:
          $ref: '#/definitions/model.Expense'
        type: array
      id:
        type: integer
      name:
        type: string
      tstamp:
        type: string
    type: object
  server.registrationData:
    properties:
      email:
        type: string
      last_name:
        type: string
      name:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
paths:
  /account/info:
    get:
      consumes:
      - application/json
      description: Get account information for a given user
      parameters:
      - description: Username
        in: query
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.AccountInfo'
        "400":
          description: Bad Request
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Not Found
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Get account information
      tags:
      - account
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login into app
      parameters:
      - description: User credentials
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/model.Credentials'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Login in the application
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user account
      parameters:
      - description: User Registration Data
        in: body
        name: registrationData
        required: true
        schema:
          $ref: '#/definitions/server.registrationData'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: Invalid request payload
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Register User in the application
      tags:
      - auth
  /expenses:
    get:
      description: Get all expenses
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Expense'
            type: array
      summary: Get all expenses
      tags:
      - expenses
    post:
      consumes:
      - application/json
      description: Create a new expense
      parameters:
      - description: Expense to create
        in: body
        name: expense
        required: true
        schema:
          $ref: '#/definitions/model.Expense'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Expense'
      summary: Create a new expense
      tags:
      - expenses
  /expenses/{id}:
    delete:
      description: Delete an expense
      parameters:
      - description: Expense ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      summary: Delete an expense
      tags:
      - expenses
    get:
      description: Get an expense by ID
      parameters:
      - description: Expense ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Expense'
      summary: Get an expense by ID
      tags:
      - expenses
    put:
      consumes:
      - application/json
      description: Update an expense
      parameters:
      - description: Expense ID
        in: path
        name: id
        required: true
        type: integer
      - description: Expense to update
        in: body
        name: expense
        required: true
        schema:
          $ref: '#/definitions/model.Expense'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Expense'
      summary: Update an expense
      tags:
      - expenses
  /reports:
    get:
      description: Get all reports
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Report'
            type: array
      summary: Get all reports
      tags:
      - reports
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Create a new report
      parameters:
      - description: Report name
        in: formData
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Report'
      summary: Create a new report
      tags:
      - reports
  /reports/{id}:
    delete:
      description: Delete a report
      parameters:
      - description: Report ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      summary: Delete a report
      tags:
      - reports
    get:
      description: Get a report by ID
      parameters:
      - description: Report ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Report'
      summary: Get a report by ID
      tags:
      - reports
    put:
      consumes:
      - application/json
      description: Update a report
      parameters:
      - description: Report ID
        in: path
        name: id
        required: true
        type: integer
      - description: Report to update
        in: body
        name: report
        required: true
        schema:
          $ref: '#/definitions/model.Report'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Report'
      summary: Update a report
      tags:
      - reports
swagger: "2.0"
